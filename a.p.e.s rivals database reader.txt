VERSION = 3
--@name A.P.E.S Rivals Database Reader
--@author jon b
--@shared
--@model models/spacecode/sfchip.mdl
if SERVER then
    --spawn and link a screen, the net it to client for rendering
    Screen = prop.createComponent(chip():getPos()+Vector(0,0,50),(owner():getEyePos()-chip():getPos()+Vector(0,0,50)):getAngle():setP(90),"starfall_screen","models/hunter/plates/plate1x1.mdl",true)
    Screen:linkComponent(chip())
    net.start("NetScreen") net.writeEntity(Screen) net.send()
    --check for updates
    http.get("https://raw.githubusercontent.com/BPRJon/A.P.E.S-Rival-Database/refs/heads/main/a.p.e.s%20rivals%20database%20reader.txt",function(data) local ver = string.explode("\n",data)[1] if ver != "VERSION = "..VERSION then print("Database Reader out of date! Please update at https://github.com/BPRJon/A.P.E.S-Rival-Database/blob/main/a.p.e.s%20rivals%20database%20reader.txt") end end,function() print("Couldn't check for possible updates. Go to https://github.com/BPRJon/A.P.E.S-Rival-Database/tree/main and check for updates please!") end)
elseif CLIENT then
    --read the screen net
    net.receive("NetScreen",function()
        Screen = net.readEntity()
        end)
    
    --links for the github data
    linkData = {
        ["Grox Astro Fleet"] = "https://raw.githubusercontent.com/BPRJon/A.P.E.S-Rival-Database/refs/heads/main/database-submissions/Grox%20Astro%20Fleet.txt"
    }
    entryList = {}
    selectedFaction = nil
    selectedEntry = 0
    
    --changed function (ty adver)
    local changedTable = {}
    function changed(index,obj)
        local bool = (obj ~= changedTable[index])
        changedTable[index] = obj
        return bool
    end
    
    --bunton function
    hook.add("think","mousepos and click detection",function() mouseClk = changed("DidTheyLeftClick",input.isMouseDown(MOUSE.LEFT)) and input.isMouseDown(MOUSE.LEFT) end)
    local buttonTable = {}
    local render_drawRectOutline = render.drawRectOutline
    local render_drawSimpleText = render.drawSimpleText
    local render_getTextSize = render.getTextSize
    function button(x,y,text,func)
        if y > 30 or text == " X " or text == " < " then
        local textSizeX,textSizeY = render_getTextSize(text)
        local buttonClk = mouseX ~= nil and mouseX < x+textSizeX+4 and mouseX > x and mouseY < y+textSizeY+4 and mouseY > y and mouseClk
        
        buttonTable[text] = buttonClk
        if func ~= nil and buttonClk then func() end
        
        render_drawRectOutline(x-1,y-1,textSizeX+3,textSizeY+3)
        render_drawSimpleText(x+1,y+1,text,TEXT_ALIGN.LEFT,TEXT_ALIGN.TOP)
        end
    end
    
    --[[
    --testing url textures
    render.createRenderTarget("TestMatCat")
    TestMat = material.create("UnlitGeneric")
    TestMat:setTextureRenderTarget("$basetexture","TestMatCat")
    TestMat:setTextureURL("$basetexture","https://raw.githubusercontent.com/BPRJon/A.P.E.S-Rival-Database/refs/heads/main/alex.png")
    ]]
    
    --set up the rendertarget
    render.createRenderTarget("background-image")
    RTMat = material.create("UnlitGeneric")
    RTMat:setTextureRenderTarget("$basetexture","background-image")
    
    --render the shit.
    render.setFont("Trebuchet24")
    local scroll = 0
    local defaultBGLink = "https://raw.githubusercontent.com/BPRJon/A.P.E.S-Rival-Database/refs/heads/main/database-images/RESETBG.png"
    --local defaultBGLink = "https://raw.githubusercontent.com/BPRJon/A.P.E.S-Rival-Database/refs/heads/main/alex.png"
    hook.add("render","drawscreen",function()
        render.setRenderTargetTexture("background-image")
        render.drawTexturedRectFast(0,30,1024,1024)
        mouseX,mouseY = render.cursorPos()
        render.clear()
        render.setColor(Color(100,0,0))
        render.drawRect(0,0,512,30)
        render.setColor(Color(255,255,255))
        local fancyPathText = "SAT4/RIVALS-DATABASE/"
        if selectedFaction == nil then
            local num = 0
            for i,v in pairs(linkData) do
                num = num + 1
                button(5,50*num,i,function() selectedFaction = i http.get(v,function(data) entryList = string.explode("/NEW_ENTRY/",data) end) end)
            end
        else
            fancyPathText = fancyPathText..selectedFaction.."/"
            local scrollMax = table.count(entryList)*20
            button(480,0," X ",function() selectedFaction = nil selectedEntry = 0 RTMat:setTextureURL("$basetexture",defaultBGLink) end)
            if selectedEntry ~= 0 then
                local markup = render.parseMarkup("<font=Trebuchet24>"..entryList[selectedEntry].."</font>",450)
                _,scrollMax = markup:getSize()
                markup:draw(5,40+scroll)
                fancyPathText = fancyPathText..selectedEntry.."/"
                button(450,0," < ",function() selectedEntry = 0 scroll = 0 RTMat:setTextureURL("$basetexture",defaultBGLink) end)
            else
                for i,v in pairs(entryList) do
                    local text = string.replace(string.explode("\n",v)[1],"ENTRY_NAME: ","")
                    button(5,50*i+scroll,text,function() selectedEntry = i scroll = 0 RTMat:setTextureURL("$basetexture","https://raw.githubusercontent.com/BPRJon/A.P.E.S-Rival-Database/refs/heads/main/database-images/"..string.replace(selectedFaction," ","").."/"..string.replace(string.replace(text," ",""),"\"","")..".png") end)
                end
            end
            button(480,40,"UP",function() scroll = math.clamp(scroll+100,-scrollMax,0) end)
            button(480,480,"DN",function() scroll = math.clamp(scroll-100,-scrollMax,0) end)
        end
        render.drawSimpleText(5,15,fancyPathText,TEXT_ALIGN.LEFT,TEXT_ALIGN.CENTER)
        end)
end